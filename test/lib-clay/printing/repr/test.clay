import printer.formatter.(repr, stringRepr);
import numbers.floats.(nan, nan?);
import printer.(println, str);
import data.strings.(String);
import complex.*;
import data.algorithms.*;

import test.*;

record Foo (x:Int, y:StringLiteralRef);

variant Bar (Int, StringLiteralRef);

forceinline testWithEval(expr) {
    expectPrinted(expr, repr(eval expr));
}

main() = testMain(
    TestSuite("repr", array(
        TestCase("numbers", -> {
            testWithEval("0ss");
            testWithEval("0uss");
            testWithEval("0s");
            testWithEval("0us");
            testWithEval("0i");
            testWithEval("0u");
            testWithEval("0l");
            testWithEval("0ul");

            expectPrinted( "0x0.0000000000000p+0",  repr(0.0));
            expectPrinted("-0x0.0000000000000p+0",  repr(-0.0));
            expectPrinted( "0x1.0000000000000p+0",  repr(1.0));
            expectPrinted( "0x1.8000000000000p+0",  repr(1.5));
            expectPrinted( "nan(Float64)"        ,  repr(nan(Double)));

            expectPrinted( "0x0.000000p+0f", repr(0.0f));
            expectPrinted("-0x0.000000p+0f", repr(-0.0f));
            expectPrinted( "0x1.000000p+0f", repr(1.0f));
            expectPrinted( "0x1.800000p+0f", repr(1.5f));
            expectPrinted( "nan(Float32)",   repr(nan(Float)));

            expectPrinted( "0x0.000000p+0f+0x0.000000p+0fj", repr( 0.0f+0.0fj));
            expectPrinted( "0x0.000000p+0f-0x0.000000p+0fj", repr( 0.0f-0.0fj));
            expectPrinted("-0x0.000000p+0f+0x0.000000p+0fj", repr(-0.0f+0.0fj));
            expectPrinted("-0x0.000000p+0f-0x0.000000p+0fj", repr(-0.0f-0.0fj));

            expectPrinted( "0x1.000000p+0f+0x1.000000p+0fj", repr( 1.0f+1.0fj));
            expectPrinted( "0x1.000000p+0f-0x1.000000p+0fj", repr( 1.0f-1.0fj));
            expectPrinted("-0x1.000000p+0f+0x1.000000p+0fj", repr(-1.0f+1.0fj));
            expectPrinted("-0x1.000000p+0f-0x1.000000p+0fj", repr(-1.0f-1.0fj));

            expectPrinted("nan(Complex32)", repr(nan(Complex32)));

            expectPrinted( "0x0.0000000000000p+0+0x0.0000000000000p+0j", repr( 0.0+0.0j));
            expectPrinted( "0x0.0000000000000p+0-0x0.0000000000000p+0j", repr( 0.0-0.0j));
            expectPrinted("-0x0.0000000000000p+0+0x0.0000000000000p+0j", repr(-0.0+0.0j));
            expectPrinted("-0x0.0000000000000p+0-0x0.0000000000000p+0j", repr(-0.0-0.0j));

            expectPrinted( "0x1.0000000000000p+0+0x1.0000000000000p+0j", repr( 1.0+1.0j));
            expectPrinted( "0x1.0000000000000p+0-0x1.0000000000000p+0j", repr( 1.0-1.0j));
            expectPrinted("-0x1.0000000000000p+0+0x1.0000000000000p+0j", repr(-1.0+1.0j));
            expectPrinted("-0x1.0000000000000p+0-0x1.0000000000000p+0j", repr(-1.0-1.0j));

            expectPrinted("nan(Complex64)", repr(nan(Complex64)));
        }),
        TestCase("chars, strings", -> {
            testWithEval("'x'");
            testWithEval("' '");
            testWithEval("'~'");
            testWithEval("'\\x01'");
            testWithEval("'\\x1F'");
            testWithEval("'\\x7F'");
            testWithEval("'\\x80'");
            testWithEval("'\\xFF'");

            testWithEval("'\\0'");
            testWithEval("'\\n'");
            testWithEval("'\\r'");
            testWithEval("'\\t'");
            testWithEval("'\\f'");
            testWithEval("'\\\''");
            testWithEval("'\\\"'");

            testWithEval("\"x ~\\x01\\x1F\\x7F\\x80\\xFF\"");
            testWithEval(""""\0\n\r\t\f\'\""""");
        }),
        TestCase("tuples", -> {
            testWithEval("""[]""");
            testWithEval("""[1u]""");
            testWithEval("""[1i, "two"]""");
        }),
        TestCase("records", -> {
            testWithEval("""Foo(1i, StringLiteralRef("two"))""");
        }),
        TestCase("variants", -> {
            testWithEval("""Bar(1i)""");
            testWithEval("""Bar(StringLiteralRef("two"))""");
        }),
        TestCase("statics", -> {
            testWithEval("#1i");
            testWithEval("#2u");
            testWithEval("#3l");
            testWithEval("#true");

            // symbols
            testWithEval("TestCase");
            testWithEval("repr");
        }),
        TestCase("strings", -> {
            testWithEval(""""static"""");
            testWithEval("""StringLiteralRef("string literal ref")""");
            testWithEval("""String("string")""");
            testWithEval("""CStringRef("cstring ref")""");
            testWithEval("""CStringRef()""");
            testWithEval("""StringRef("string ref")""");
            testWithEval("""StringRef()""");
        }),
        TestCase("stringRepr", -> {
            expectPrinted(""""abc\r\n\""""", stringRepr("abc\r\n\""));
            expectPrinted(""""abc\r\n\""""", stringRepr(String"abc\r\n\""));
            expectPrinted(""""abc\r\n\""""", stringRepr(StringLiteralRef"abc\r\n\""));
        }),
        TestCase("ArrayRef", -> {
            testWithEval("""ArrayRef[Int32]""");
            // content printing is not tested, because output contains pointers
        }),
    )));

