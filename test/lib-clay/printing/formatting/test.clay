import test.*;
import printer.formatter.*;

main() = testMain(
    TestSuite("formatting", array(
        TestCase("number base formatters", -> {
            expectPrinted("30071",
                oct(12345)
            );
            expectPrinted("303a",
                hex(12346)
            );
            expectPrinted("303A",
                HEX(12346)
            );
            expectPrinted("-30071",
                oct(-12345)
            );
            expectPrinted("-303a",
                hex(-12346)
            );
            expectPrinted("-303A",
                HEX(-12346)
            );
        }),
        TestCase("printedWidth", -> {
            expectEqual(3, printedWidth("foo"));

            expectEqual(1, printedWidth(0));
            expectEqual(1, printedWidth(1));
            expectEqual(1, printedWidth(9));
            expectEqual(2, printedWidth(10));
            expectEqual(2, printedWidth(-1));
            expectEqual(2, printedWidth(-9));
            expectEqual(3, printedWidth(-10));
            expectEqual(
                20, printedWidth(18446744073709551615ul)
            );
            expectEqual(
                20, printedWidth(10000000000000000000ul)
            );
            expectEqual(
                19, printedWidth(9999999999999999999ul)
            );
            expectEqual(
                19, printedWidth(9223372036854775807l)
            );
            expectEqual(
                19, printedWidth(1000000000000000000l)
            );
            expectEqual(
                18, printedWidth(999999999999999999l)
            );
            expectEqual(
                20, printedWidth(-9223372036854775807l)
            );
            expectEqual(
                20, printedWidth(-1000000000000000000l)
            );
            expectEqual(
                19, printedWidth(-999999999999999999l)
            );
            expectEqual(
                3, printedWidth(111uss)
            );
            expectEqual(
                3, printedWidth(-43ss)
            );

            expectEqual(1, printedWidth(hex(0)));
            expectEqual(1, printedWidth(hex(1)));
            expectEqual(1, printedWidth(hex(0xf)));
            expectEqual(2, printedWidth(hex(0x10)));
            expectEqual(2, printedWidth(hex(-1)));
            expectEqual(2, printedWidth(hex(-0xf)));
            expectEqual(3, printedWidth(hex(-0x10)));
            expectEqual(
                16, printedWidth(hex(0xfffffffffffffffful))
            );
            expectEqual(
                16, printedWidth(hex(0x7fffffffffffffffl))
            );
            expectEqual(
                16, printedWidth(hex(0x1000000000000000l))
            );
            expectEqual(
                15, printedWidth(hex(0xfffffffffffffffl))
            );
            expectEqual(
                17, printedWidth(hex(-0x7fffffffffffffffl))
            );
            expectEqual(
                17, printedWidth(hex(-0x1000000000000000l))
            );
            expectEqual(
                16, printedWidth(hex(-0xfffffffffffffffl))
            );
        }),
        TestCase("leftAligned/rightAligned", -> {
            expectPrinted("foo  ",
                leftAligned(5, "foo")
            );
            expectPrinted("  foo",
                rightAligned(5, "foo")
            );

            expectPrinted("foo1234",
                leftAligned(5, "foo", 1234)
            );
            expectPrinted("foo1234",
                rightAligned(5, "foo", 1234)
            );

            expectPrinted("foo  ",
                leftAligned(5, "foo")
            );
            expectPrinted("  foo",
                rightAligned(5, "foo")
            );

            expectPrinted("foo--",
                leftAlignedWith(5, '-', "foo")
            );
            expectPrinted("--foo",
                rightAlignedWith(5, '-', "foo")
            );

            expectPrinted(
                "|||ffff---",
                leftAlignedWith(10, '-', rightAlignedWith(7, '|', hex(0xFFFF)))
            );
        }),
        TestCase("hexString", -> {
            expectPrinted(
                "00ff0f",
                hexString(array(0uss, 0xFFuss, 0x0Fuss)),
            );
        }),
        TestCase("UniChar is printed as sequence of UTF-8 bytes", -> {
            expectPrinted(
                "\xD1\x8F",
                UniChar(0x044f));
        }),
    )),
);
