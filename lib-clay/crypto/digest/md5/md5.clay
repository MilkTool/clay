import byteorder.*;

public import crypto.digest.*;
import crypto.digest.internal.*;



// MD5

alias MD5_NAME = #"MD5";

overload Algorithm?(#MD5_NAME) = true;

overload DigestSize(#MD5_NAME) = 16u;

overload Word(#MD5_NAME) = UInt32;

overload WordIsBigEndian?(#MD5_NAME) = false;

overload StateSizeWords(#MD5_NAME) = 4;

overload BlockSizeWords(#MD5_NAME) = 16;

overload BitCountWord(#MD5_NAME) = UInt64;

record MD5 = MakeDigest(#MD5_NAME);
record MD5Context = MakeDigestContext(#MD5_NAME);
overload AlgorithmTypes(#MD5_NAME) = #MD5, #MD5Context;

var md5Initial = array(
        0x67452301_u,
        0xefcdab89_u,
        0x98badcfe_u,
        0x10325476_u,
    );

overload stateInitial(#MD5_NAME) = ref md5Initial;

// rotation constants
private alias S11 =  7;
private alias S12 = 12;
private alias S13 = 17;
private alias S14 = 22;
private alias S21 =  5;
private alias S22 =  9;
private alias S23 = 14;
private alias S24 = 20;
private alias S31 =  4;
private alias S32 = 11;
private alias S33 = 16;
private alias S34 = 23;
private alias S41 =  6;
private alias S42 = 10;
private alias S43 = 15;
private alias S44 = 21;

// MD5 functions
private FF(a, b, c, d, x, s, ac) {
    var a1 = wrapAdd(a, bitor(bitand(b, c), bitandc(d, b)), x, ac);
    return wrapAdd(bitrol(a1, s), b);
}

private GG(a, b, c, d, x, s, ac) {
    var a1 = wrapAdd(a, bitor(bitand(b, d), bitandc(c, d)), x, ac);
    return wrapAdd(bitrol(a1, s), b);
}

private HH(a, b, c, d, x, s, ac) {
    var a1 = wrapAdd(a, bitxor(b, c, d), x, ac);
    return wrapAdd(bitrol(a1, s), b);
}

private II(a, b, c, d, x, s, ac) {
    var a1 = wrapAdd(a, bitxor(c, bitor(b, bitnot(d))), x, ac);
    return wrapAdd(bitrol(a1, s), b);
}

private alias MD5State = State(#MD5_NAME);
private alias MD5BlockBytes = BlockBytes(#MD5_NAME);

overload processBlock(#MD5_NAME, state: MD5State, chunkBytes: MD5BlockBytes) {
    ref x0 = Pointer[Array[UInt32, 16]](begin(chunkBytes))^;

    var x = bytesToWordsLittle(UInt32, chunkBytes);

    var a = state[0];
    var b = state[1];
    var c = state[2];
    var d = state[3];

    
    a = FF(a, b, c, d, x[ 0], S11, 0xd76aa478_u); 
    d = FF(d, a, b, c, x[ 1], S12, 0xe8c7b756_u); 
    c = FF(c, d, a, b, x[ 2], S13, 0x242070db_u); 
    b = FF(b, c, d, a, x[ 3], S14, 0xc1bdceee_u); 
    a = FF(a, b, c, d, x[ 4], S11, 0xf57c0faf_u); 
    d = FF(d, a, b, c, x[ 5], S12, 0x4787c62a_u); 
    c = FF(c, d, a, b, x[ 6], S13, 0xa8304613_u); 
    b = FF(b, c, d, a, x[ 7], S14, 0xfd469501_u); 
    a = FF(a, b, c, d, x[ 8], S11, 0x698098d8_u); 
    d = FF(d, a, b, c, x[ 9], S12, 0x8b44f7af_u); 
    c = FF(c, d, a, b, x[10], S13, 0xffff5bb1_u); 
    b = FF(b, c, d, a, x[11], S14, 0x895cd7be_u); 
    a = FF(a, b, c, d, x[12], S11, 0x6b901122_u); 
    d = FF(d, a, b, c, x[13], S12, 0xfd987193_u); 
    c = FF(c, d, a, b, x[14], S13, 0xa679438e_u); 
    b = FF(b, c, d, a, x[15], S14, 0x49b40821_u); 

    
    a = GG(a, b, c, d, x[ 1], S21, 0xf61e2562_u); 
    d = GG(d, a, b, c, x[ 6], S22, 0xc040b340_u); 
    c = GG(c, d, a, b, x[11], S23, 0x265e5a51_u); 
    b = GG(b, c, d, a, x[ 0], S24, 0xe9b6c7aa_u); 
    a = GG(a, b, c, d, x[ 5], S21, 0xd62f105d_u); 
    d = GG(d, a, b, c, x[10], S22, 0x02441453_u); 
    c = GG(c, d, a, b, x[15], S23, 0xd8a1e681_u); 
    b = GG(b, c, d, a, x[ 4], S24, 0xe7d3fbc8_u); 
    a = GG(a, b, c, d, x[ 9], S21, 0x21e1cde6_u); 
    d = GG(d, a, b, c, x[14], S22, 0xc33707d6_u); 
    c = GG(c, d, a, b, x[ 3], S23, 0xf4d50d87_u); 
    b = GG(b, c, d, a, x[ 8], S24, 0x455a14ed_u); 
    a = GG(a, b, c, d, x[13], S21, 0xa9e3e905_u); 
    d = GG(d, a, b, c, x[ 2], S22, 0xfcefa3f8_u); 
    c = GG(c, d, a, b, x[ 7], S23, 0x676f02d9_u); 
    b = GG(b, c, d, a, x[12], S24, 0x8d2a4c8a_u); 

    

    a = HH(a, b, c, d, x[ 5], S31, 0xfffa3942_u); 
    d = HH(d, a, b, c, x[ 8], S32, 0x8771f681_u); 
    c = HH(c, d, a, b, x[11], S33, 0x6d9d6122_u); 
    b = HH(b, c, d, a, x[14], S34, 0xfde5380c_u); 
    a = HH(a, b, c, d, x[ 1], S31, 0xa4beea44_u); 
    d = HH(d, a, b, c, x[ 4], S32, 0x4bdecfa9_u); 
    c = HH(c, d, a, b, x[ 7], S33, 0xf6bb4b60_u); 
    b = HH(b, c, d, a, x[10], S34, 0xbebfbc70_u); 
    a = HH(a, b, c, d, x[13], S31, 0x289b7ec6_u); 
    d = HH(d, a, b, c, x[ 0], S32, 0xeaa127fa_u); 
    c = HH(c, d, a, b, x[ 3], S33, 0xd4ef3085_u); 
    b = HH(b, c, d, a, x[ 6], S34, 0x04881d05_u); 
    a = HH(a, b, c, d, x[ 9], S31, 0xd9d4d039_u); 
    d = HH(d, a, b, c, x[12], S32, 0xe6db99e5_u); 
    c = HH(c, d, a, b, x[15], S33, 0x1fa27cf8_u); 
    b = HH(b, c, d, a, x[ 2], S34, 0xc4ac5665_u); 

    

    a = II(a, b, c, d, x[ 0], S41, 0xf4292244_u); 
    d = II(d, a, b, c, x[ 7], S42, 0x432aff97_u); 
    c = II(c, d, a, b, x[14], S43, 0xab9423a7_u); 
    b = II(b, c, d, a, x[ 5], S44, 0xfc93a039_u); 
    a = II(a, b, c, d, x[12], S41, 0x655b59c3_u); 
    d = II(d, a, b, c, x[ 3], S42, 0x8f0ccc92_u); 
    c = II(c, d, a, b, x[10], S43, 0xffeff47d_u); 
    b = II(b, c, d, a, x[ 1], S44, 0x85845dd1_u); 
    a = II(a, b, c, d, x[ 8], S41, 0x6fa87e4f_u); 
    d = II(d, a, b, c, x[15], S42, 0xfe2ce6e0_u); 
    c = II(c, d, a, b, x[ 6], S43, 0xa3014314_u); 
    b = II(b, c, d, a, x[13], S44, 0x4e0811a1_u); 
    a = II(a, b, c, d, x[ 4], S41, 0xf7537e82_u); 
    d = II(d, a, b, c, x[11], S42, 0xbd3af235_u); 
    c = II(c, d, a, b, x[ 2], S43, 0x2ad7d2bb_u); 
    b = II(b, c, d, a, x[ 9], S44, 0xeb86d391_u); 

    state[0] = wrapAdd(state[0], a);
    state[1] = wrapAdd(state[1], b);
    state[2] = wrapAdd(state[2], c);
    state[3] = wrapAdd(state[3], d);
}

overload digestFinish(context: MD5Context) = digestFinishGeneric(context);

md5(message) = digest(message, #MD5_NAME);

